import React, { PureComponent } from 'react';
import { NavBar, List, InputItem, Icon, Grid } from 'antd-mobile';
import QueueAnim from 'rc-queue-anim';

const Item = List.Item;

export interface IChatProps {
  fromUser: {
    id;
    username: string;
  };
  toUser: {
    id;
    username: string;
  };
  msgs: {
    id;
    userId;
    groupId;
    createTime: string;
    content: string;
  }[];
}

interface IState {
  content: string;
  isShowEmoji: boolean;
}

class Index extends PureComponent<IChatProps> {
  state: IState = {
    content: '', // ËæìÂÖ•ËÅäÂ§©ÁöÑÂÜÖÂÆπ
    isShowEmoji: false, // ÊòØÂê¶ÊòæÁ§∫Ë°®ÊÉÖÂàóË°®
  };
  emojis = [];

  // ÂàáÊç¢Ë°®ÊÉÖÂàóË°®ÁöÑÊòæÁ§∫
  toggleShow = () => {
    const isShowEmoji = !this.state.isShowEmoji;
    this.setState({ isShowEmoji });
    if (isShowEmoji) {
      // !ÂºÇÊ≠•ÊâãÂä®Ê¥æÂèëresizeÊó∂Èó¥,Ëß£ÂÜ≥Ë°®ÊÉÖÂàóË°®ÊòæÁ§∫bug
      setTimeout(() => {
        window.dispatchEvent(new Event('resize'));
      });
    }
  };
  // Âú®Á¨¨‰∏ÄÊ¨°render()‰πãÂâçÂõûË∞É
  componentWillMount() {
    // ÂàùÂßãÂåñË°®ÊÉÖÂàóË°®Êï∞ÊçÆ
    const emojis = [
      'üòÄ',
      'üòÉ',
      'üòÑ',
      'üòÅ',
      'üòÜ',
      'üòÖ',
      'ü§£',
      'üòÇ',
      'üôÇ',
      'üôÉ',
      'üòâ',
      'üòä',
      'üòá',
      'üòç',
      'ü§©',
      'üòò',
      'üòó',
      'üòö',
      'üòô',
      'üòã',
      'üòõ',
      'üòú',
      'ü§™',
      'üòù',
      'ü§ë',
      'ü§ó',
      'ü§≠',
      'ü§´',
      'ü§î',
      'ü§ê',
      'ü§®',
      'üòê',
      'üòë',
      'üò∂',
      'üòè',
      'üòí',
      'üôÑ',
      'üò¨',
      'ü§•',
      'üòå',
      'üòî',
      'üò™',
      'ü§§',
      'üò¥',
      'üò∑',
      'ü§í',
      'ü§ï',
      'ü§¢',
      'ü§Æ',
      'ü§ß',
    ];
    this.emojis = emojis.map(emoji => ({ text: emoji }));
  }

  componentDidMount() {
    // ÂàùÂßãÊòæÁ§∫ÂàóË°®
    window.scrollTo(0, document.body.scrollHeight);
  }

  componentDidUpdate() {
    // Êõ¥Êñ∞ÊòæÁ§∫ÂàóË°®
    window.scrollTo(0, document.body.scrollHeight);
  }
  componentWillUnmount() {
    // ÂèëËØ∑Ê±ÇÊõ¥Êñ∞Ê∂àÊÅØÁöÑÊú™ËØªÁä∂ÊÄÅ
    // const targetId = this.props.match.params.userid;
    // this.props.readMsg(targetId);
  }
  handleSend = () => {
    const content = this.state.content.trim();
    const { id: toId } = this.props.toUser;
    const { id: fromId } = this.props.fromUser;
    // this.props.sendMsg({ from: fromId, to: toId, content });
    this.setState({ content: '', isShowEmoji: false });
  };
  render() {
    const { toUser, msgs } = this.props;
    // const targetIcon = users[targetId] ? require(`../../assets/images/${users[targetId].avatar}.png`) : null;
    const targetIcon = require(`../../assets/head/Â§¥ÂÉè1.png`);

    return (
      <div id="chat-page">
        <NavBar
          className="stick-top"
          icon={<Icon type="left" />}
          onLeftClick={() => this.props.history.goBack()}
        >
          {toUser.username || ''}
        </NavBar>
        <List style={{ marginBottom: 50, marginTop: 50 }}>
          {/*alpha left right top bottom scale scaleBig scaleX scaleY*/}
          <QueueAnim type="left" delay={100}>
            {msgs.map(msg => {
              if (msg.userId === toUser.id) {
                return (
                  <Item key={msg.id} thumb={targetIcon}>
                    {msg.content}
                  </Item>
                );
              } else {
                return (
                  <Item key={msg.id} className="chat-me" extra="Êàë">
                    {msg.content}
                  </Item>
                );
              }
            })}
          </QueueAnim>
        </List>
        <div className="am-tab-bar">
          <InputItem
            placeholder="ËØ∑ËæìÂÖ•"
            value={this.state.content}
            onChange={val => this.setState({ content: val })}
            onFocus={() => this.setState({ isShowEmoji: false })}
            extra={
              <span>
                <span role="img" onClick={this.toggleShow} style={{ marginRight: 5 }}>
                  üòä
                </span>
                <span onClick={this.handleSend}>ÂèëÈÄÅ</span>
              </span>
            }
          />
          {this.state.isShowEmoji ? (
            <Grid
              data={this.emojis}
              columnNum={8}
              carouselMaxRow={4}
              isCarousel={true}
              onClick={item => {
                this.setState({ content: this.state.content + item.text });
              }}
            />
          ) : null}
        </div>
      </div>
    );
  }
}

export default Index;
